{"version":3,"sources":["assets/A.mp3","assets/violin_c3.mp3","mqtt.js","midi.js","components/Orchestra.js","components/Audience.js","components/Conductor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","client","mqtt","connect","status","samples","C3","A","violinSamples","Violin_C3","useState","percussion","setPercussion","violin","setViolin","useEffect","Sampler","volume","value","reverb","Freeverb","pingPongDelay","PingPongDelay","delayTime","feedback","wet","Master","on","topic","message","JSON","parse","toString","channel","note","velocity","statusTypes","triggerAttackRelease","subscribe","unsubscribe","onClick","Orchestra","setChannel","setNote","setVelocity","Select","onChange","e","target","MenuItem","TextField","label","variant","type","Button","color","publish","stringify","vel","createNoteOnMessage","App","styled","div","path","Conductor","Audience","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d54a43ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/A.5e794cdb.mp3\";","module.exports = __webpack_public_path__ + \"static/media/violin_c3.bbc9708e.mp3\";","import mqtt from \"mqtt\";\n// const client = mqtt.connect(\"ws://localhost:9001\");\nconst client = mqtt.connect(\"wss://try:try@broker.shiftr.io\");\nexport default client;","const status = {\n    noteOn: 144,\n    noteOff: 128\n}\nconst createNoteOnMessage = (channel, note, vel) => {\n    return {\n        channel,\n        status: status.noteOn,\n        note,\n        velocity: vel ? vel : 127\n    }\n}\nexport {createNoteOnMessage, status}","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Freeverb, PingPongDelay, Master, Sampler } from \"tone\";\nimport client from \"../mqtt\"\nimport {status as statusTypes} from \"../midi\"\nimport A from \"../assets/A.mp3\"\nimport Violin_C3 from \"../assets/violin_c3.mp3\"\n\nconst samples = {\n    C3: A\n}\n\nconst violinSamples = {\n    C3: Violin_C3\n}\n\nexport default () => {\n  const [percussion, setPercussion] = useState(null);\n  const [violin, setViolin] = useState(null);\n\n  useEffect(() => {\n    const percussion = new Sampler(samples);\n    percussion.volume.value = -6;\n    const reverb = new Freeverb(0.6, 5000);\n    const pingPongDelay = new PingPongDelay({\n      delayTime: \"32n\",\n      feedback: 0.7,\n      wet: 0.25,\n    });\n    percussion.volume.value = 0;\n    percussion.connect(pingPongDelay);\n    pingPongDelay.connect(reverb);\n    reverb.connect(Master);\n    setPercussion(percussion);\n\n    const violin = new Sampler(violinSamples)\n    violin.volume.value = 0\n    violin.connect(Master)\n    setViolin(violin)\n  }, []);\n\n  useEffect(() => {\n    // TODO: only fire once\n    client.on('message', function (topic, message) {\n      const {channel, note, velocity, status} = JSON.parse(message.toString())\n      if(status != statusTypes.noteOn) return\n      switch(channel){\n        case 1: {\n          if(percussion) percussion.triggerAttackRelease(note)\n          break;\n        }\n        case 2: {\n          if(violin) violin.triggerAttackRelease(note)\n          break;\n        }\n      }\n    })\n    client.subscribe(\"vgig/midi\")\n  }, [percussion, violin], ()=> {\n      client.unsubscribe(\"vgig/midi\")\n  });\n\n//   useEffect(() => {\n//     if (instrument) {\n//       if (note) {\n//         // TODO: check why this is not working\n//         // instrument.triggerAttack(note, 0, velocity);\n//         instrument.triggerAttack(note, undefined, velocity);\n//       } else {\n//         instrument.triggerRelease();\n//       }\n//     }\n//   }, [instrument, note, velocity]);\n\n  return (\n      <h1 onClick={()=> percussion.triggerAttackRelease(\"C3\", 0.2)}>orchestra</h1>\n  );\n};\n","import React from \"react\"\nimport Orchestra from \"./Orchestra\"\n\nexport default () => {\n    return (\n        <>\n        <div>audience</div>\n        <Orchestra></Orchestra>\n        </>\n    )\n}","import React, {useState} from \"react\"\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport client from \"../mqtt\"\nimport {createNoteOnMessage} from \"../midi\"\n\nexport default () => {\n    const [channel, setChannel] = useState(1)\n    const [note, setNote] = useState(60)\n    const [velocity, setVelocity] = useState(100)\n    return (\n        <>\n        <Select\n          value={channel}\n          onChange={(e)=>{\n              setChannel(e.target.value)\n\n          }}\n        >\n          <MenuItem value={1}>percussion (ch. 1)</MenuItem>\n          <MenuItem value={2}>violin (ch. 2)</MenuItem>\n          <MenuItem value={3}>3</MenuItem>\n          <MenuItem value={4}>4</MenuItem>\n          <MenuItem value={5}>5</MenuItem>\n          <MenuItem value={6}>6</MenuItem>\n          <MenuItem value={7}>7</MenuItem>\n          <MenuItem value={8}>8</MenuItem>\n          <MenuItem value={9}>9</MenuItem>\n          <MenuItem value={10}>10</MenuItem>\n          <MenuItem value={11}>11</MenuItem>\n          <MenuItem value={12}>12</MenuItem>\n          <MenuItem value={13}>13</MenuItem>\n          <MenuItem value={14}>14</MenuItem>\n          <MenuItem value={15}>15</MenuItem>\n          <MenuItem value={16}>16</MenuItem>\n        </Select>\n        <TextField label=\"note\" variant=\"outlined\" type=\"number\" value={note} onChange={(e) => {setNote(e.target.value)}}/>\n        <TextField label=\"velocity\" variant=\"outlined\" type=\"number\" value={velocity} onChange={(e) => {setVelocity(e.target.value)}}/>\n        <Button variant=\"contained\" color=\"primary\" onClick={() => {\n            client.publish(\"vgig/midi\", JSON.stringify(createNoteOnMessage(channel, note, velocity)))\n        }}>\n        trigger test sample\n        </Button>\n        </>\n    )\n}","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport styled from \"styled-components\"\nimport Audience from \"./components/Audience\"\nimport Conductor from \"./components/Conductor\"\n\nconst App = styled.div`\nwidth: 100vw;\nheight: 100vh;\nbackground-color: lightgreen;\n`\n\n\nexport default () => {\n  return (\n    <App>\n          <Router>\n          <Switch>\n          <Route path=\"/conductor\">\n            <Conductor />\n          </Route>\n          <Route path=\"/\">\n            <Audience />\n          </Route>\n        </Switch>\n          </Router>\n    </App>\n  )\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}