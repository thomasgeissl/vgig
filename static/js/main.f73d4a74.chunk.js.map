{"version":3,"sources":["mqtt.js","midi.js","components/Conductor.js","components/Audience.js","components/Orchestra.js","components/Hall.js","App.js","serviceWorker.js","index.js","assets/A.mp3","assets/violin_c3.mp3"],"names":["client","mqtt","connect","status","useState","channel","setChannel","note","setNote","velocity","setVelocity","Select","value","onChange","e","target","MenuItem","TextField","label","variant","type","Button","color","onClick","publish","JSON","stringify","vel","createNoteOnMessage","colors","shapes","random","i","r","Math","position","round","length","scale","rotation","THREE","degToRad","data","Array","fill","map","shape","args","Content","useSprings","from","config","mass","tension","friction","springs","set","useEffect","setInterval","delay","d","index","mesh","key","castShadow","receiveShadow","meshStandardMaterial","roughness","metalness","Lights","intensity","angle","PI","penumbra","shadow-mapSize-width","shadow-mapSize-height","style","background","camera","fov","samples","C3","A","violinSamples","Violin_C3","Container","styled","div","Fatline","curve","width","speed","material","useRef","useFrame","current","uniforms","dashOffset","attach","vertices","ref","transparent","depthTest","lineWidth","dashArray","dashRatio","Lines","count","useMemo","pos","points","add","clone","getPoints","parseInt","max","props","extend","meshline","percussion","setPercussion","violin","setViolin","Sampler","volume","reverb","Freeverb","pingPongDelay","PingPongDelay","delayTime","feedback","wet","Master","on","topic","message","parse","toString","statusTypes","triggerAttackRelease","subscribe","unsubscribe","Orchestra","className","Audience","App","path","Conductor","Hall","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.f73d4a74.chunk.js","sourcesContent":["import mqtt from \"mqtt\";\n// const client = mqtt.connect(\"ws://localhost:9001\");\nconst client = mqtt.connect(\"wss://try:try@broker.shiftr.io\");\nexport default client;","const status = {\n    noteOn: 144,\n    noteOff: 128\n}\nconst createNoteOnMessage = (channel, note, vel) => {\n    return {\n        channel,\n        status: status.noteOn,\n        note,\n        velocity: vel ? vel : 127\n    }\n}\nexport {createNoteOnMessage, status}","import React, {useState} from \"react\"\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport client from \"../mqtt\"\nimport {createNoteOnMessage} from \"../midi\"\n\nexport default () => {\n    const [channel, setChannel] = useState(1)\n    const [note, setNote] = useState(60)\n    const [velocity, setVelocity] = useState(100)\n    return (\n        <>\n        <Select\n          value={channel}\n          onChange={(e)=>{\n              setChannel(e.target.value)\n\n          }}\n        >\n          <MenuItem value={1}>percussion (ch. 1)</MenuItem>\n          <MenuItem value={2}>violin (ch. 2)</MenuItem>\n          <MenuItem value={3}>3</MenuItem>\n          <MenuItem value={4}>4</MenuItem>\n          <MenuItem value={5}>5</MenuItem>\n          <MenuItem value={6}>6</MenuItem>\n          <MenuItem value={7}>7</MenuItem>\n          <MenuItem value={8}>8</MenuItem>\n          <MenuItem value={9}>9</MenuItem>\n          <MenuItem value={10}>10</MenuItem>\n          <MenuItem value={11}>11</MenuItem>\n          <MenuItem value={12}>12</MenuItem>\n          <MenuItem value={13}>13</MenuItem>\n          <MenuItem value={14}>14</MenuItem>\n          <MenuItem value={15}>15</MenuItem>\n          <MenuItem value={16}>16</MenuItem>\n        </Select>\n        <TextField label=\"note\" variant=\"outlined\" type=\"number\" value={note} onChange={(e) => {setNote(e.target.value)}}/>\n        <TextField label=\"velocity\" variant=\"outlined\" type=\"number\" value={velocity} onChange={(e) => {setVelocity(e.target.value)}}/>\n        <Button variant=\"contained\" color=\"primary\" onClick={() => {\n            client.publish(\"vgig/midi\", JSON.stringify(createNoteOnMessage(channel, note, velocity)))\n        }}>\n        trigger test sample\n        </Button>\n        </>\n    )\n}","import React, { useEffect } from 'react'\nimport * as THREE from 'three'\nimport { OrbitControls } from 'drei'\nimport * as meshline from 'threejs-meshline'\nimport { extend, Canvas, useFrame, useThree } from 'react-three-fiber'\nimport { useSprings, a } from 'react-spring/three'\n\nconst number = 35\nconst colors = ['#A2CCB6', '#FCEEB5', '#EE786E', '#e0feff', 'lightpink', 'lightblue']\nconst shapes = ['planeBufferGeometry', 'planeBufferGeometry', 'planeBufferGeometry']\nconst random = (i) => {\n  const r = Math.random()\n  return {\n    position: [100 - Math.random() * 200, 100 - Math.random() * 200, i * 1.5],\n    color: colors[Math.round(Math.random() * (colors.length - 1))],\n    scale: [1 + r * 14, 1 + r * 14, 1],\n    rotation: [0, 0, THREE.Math.degToRad(Math.round(Math.random()) * 45)],\n  }\n}\n\nconst data = new Array(number).fill().map(() => {\n  const shape = shapes[Math.round(Math.random() * (shapes.length - 1))]\n  return {\n    shape,\n    color: colors[Math.round(Math.random() * (colors.length - 1))],\n    args: [0.1 + Math.random() * 9, 0.1 + Math.random() * 9, 10],\n  }\n})\n\nfunction Content() {\n  const [springs, set] = useSprings(number, (i) => ({\n    from: random(i),\n    ...random(i),\n    config: { mass: 20, tension: 150, friction: 50 },\n  }))\n  useEffect(() => void setInterval(() => set((i) => ({ ...random(i), delay: i * 40 })), 3000), [set])\n  return data.map((d, index) => (\n    <a.mesh key={index} {...springs[index]} castShadow receiveShadow>\n      <boxBufferGeometry args={d.args} />\n      <a.meshStandardMaterial color={springs[index].color} roughness={0.75} metalness={0.5} />\n    </a.mesh>\n  ))\n}\n\nfunction Lights() {\n  return (\n    <group>\n      <pointLight intensity={0.3} />\n      <ambientLight intensity={2} />\n      <spotLight\n        castShadow\n        intensity={0.2}\n        angle={Math.PI / 7}\n        position={[150, 150, 250]}\n        penumbra={1}\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n      />\n    </group>\n  )\n}\n\n\nexport default () => {\n    return (\n      <Canvas\n      style={{ background: 'rgb(0,0,0)' }}\n      camera={{ position: [0, 0, 100], fov: 1000 }}\n    >\n             <Lights />\n      <mesh receiveShadow>\n        <planeBufferGeometry args={[1000, 1000]} />\n        <meshStandardMaterial color=\"#A2ACB6\" roughness={1} />\n      </mesh>\n      <Content />\n      <OrbitControls></OrbitControls>\n      </Canvas>\n    )\n}","import React, { useState, useEffect, useMemo, useRef} from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\"\nimport { Freeverb, PingPongDelay, Master, Sampler } from \"tone\";\nimport client from \"../mqtt\"\nimport {status as statusTypes} from \"../midi\"\nimport A from \"../assets/A.mp3\"\nimport Violin_C3 from \"../assets/violin_c3.mp3\"\n\n\nimport * as THREE from 'three'\nimport { OrbitControls } from 'drei'\nimport * as meshline from 'threejs-meshline'\nimport { extend, Canvas, useFrame, useThree } from 'react-three-fiber'\n\nconst samples = {\n    C3: A\n}\n\nconst violinSamples = {\n    C3: Violin_C3\n}\n\nconst Container = styled.div`\n  width: 100%;\n  height: 66%;\n`\n\n\nextend(meshline)\n\nfunction Fatline({ curve, width, color, speed }) {\n  const material = useRef()\n  useFrame(() => (material.current.uniforms.dashOffset.value -= speed))\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={curve} />\n      <meshLineMaterial\n        attach=\"material\"\n        ref={material}\n        transparent\n        depthTest={false}\n        lineWidth={width}\n        color={color}\n        dashArray={0.1}\n        dashRatio={0.9}\n      />\n    </mesh>\n  )\n}\n\nfunction Lines({ count, colors }) {\n  const lines = useMemo(\n    () =>\n      new Array(count).fill().map(() => {\n        const pos = new THREE.Vector3(10 - Math.random() * 20, 10 - Math.random() * 20, 10 - Math.random() * 20)\n        const points = new Array(30)\n          .fill()\n          .map(() =>\n            pos.add(new THREE.Vector3(4 - Math.random() * 8, 4 - Math.random() * 8, 2 - Math.random() * 4)).clone()\n          )\n        const curve = new THREE.CatmullRomCurve3(points).getPoints(1000)\n        return {\n          color: colors[parseInt(colors.length * Math.random())],\n          width: Math.max(0.1, 0.65 * Math.random()),\n          speed: Math.max(0.0001, 0.0005 * Math.random()),\n          curve,\n        }\n      }),\n    [colors, count]\n  )\n  return lines.map((props, index) => <Fatline key={index} {...props} />)\n}\n\n\nexport default () => {\n  const [percussion, setPercussion] = useState(null);\n  const [violin, setViolin] = useState(null);\n\n  useEffect(() => {\n    const percussion = new Sampler(samples);\n    percussion.volume.value = -6;\n    const reverb = new Freeverb(0.6, 5000);\n    const pingPongDelay = new PingPongDelay({\n      delayTime: \"32n\",\n      feedback: 0.7,\n      wet: 0.25,\n    });\n    percussion.volume.value = 0;\n    percussion.connect(pingPongDelay);\n    pingPongDelay.connect(reverb);\n    reverb.connect(Master);\n    setPercussion(percussion);\n\n    const violin = new Sampler(violinSamples)\n    violin.volume.value = 0\n    violin.connect(Master)\n    setViolin(violin)\n  }, []);\n\n  useEffect(() => {\n    // TODO: only fire once\n    client.on('message', function (topic, message) {\n      const {channel, note, velocity, status} = JSON.parse(message.toString())\n      if(status != statusTypes.noteOn) return\n      switch(channel){\n        case 1: {\n          if(percussion) percussion.triggerAttackRelease(note)\n          break;\n        }\n        case 2: {\n          if(violin) violin.triggerAttackRelease(note)\n          break;\n        }\n      }\n    })\n    client.subscribe(\"vgig/midi\")\n  }, [percussion, violin], ()=> {\n      client.unsubscribe(\"vgig/midi\")\n  });\n\n//   useEffect(() => {\n//     if (instrument) {\n//       if (note) {\n//         // TODO: check why this is not working\n//         // instrument.triggerAttack(note, 0, velocity);\n//         instrument.triggerAttack(note, undefined, velocity);\n//       } else {\n//         instrument.triggerRelease();\n//       }\n//     }\n//   }, [instrument, note, velocity]);\n\n  return (\n    <Container>\n      <Canvas\n      style={{ background: 'rgb(0,0,0)' }}\n      camera={{ position: [0, 0, 10], fov: 25 }}\n    >\n      <Lines count={20} colors={['rgb(100,0,0)', '#222', '#aaa', '#e0feff', 'rgb(100,0,60)', 'rgb(127,32,64)']} />\n      <OrbitControls></OrbitControls>\n    </Canvas>\n    </Container>\n  );\n};\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport Audience from \"./Audience\"\nimport Orchestra from \"./Orchestra\"\n\nconst Container = styled.div`\n    .audience {\n        width: 100%;\n        height: 33%;\n    }\n    width: 100%;\n    height: 100%;\n`\nexport default () => {\n    return (\n        <Container>\n            <Orchestra className=\"orchestra\"></Orchestra>\n            <Audience className=\"audience\"></Audience>\n        </Container>\n    )\n}","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport styled from \"styled-components\"\nimport Conductor from \"./components/Conductor\"\nimport Hall from \"./components/Hall\"\n\nconst App = styled.div`\nwidth: 100vw;\nheight: 100vh;\n`\n\n\nexport default () => {\n  return (\n    <App>\n          <Router>\n          <Switch>\n          <Route path=\"/conductor\">\n            <Conductor />\n          </Route>\n          <Route path=\"/\">\n            <Hall />\n          </Route>\n        </Switch>\n          </Router>\n    </App>\n  )\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/A.5e794cdb.mp3\";","module.exports = __webpack_public_path__ + \"static/media/violin_c3.bbc9708e.mp3\";"],"sourceRoot":""}