{"version":3,"sources":["assets/A.mp3","components/Orchestra.js","components/Audience.js","components/Conductor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","samples","C3","A","useState","instrument","setInstrument","useEffect","inst","Sampler","volume","value","reverb","Freeverb","pingPongDelay","PingPongDelay","delayTime","feedback","wet","connect","Master","onClick","triggerAttackRelease","Orchestra","App","className","path","Conductor","Audience","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iFAAAA,EAAOC,QAAU,IAA0B,+B,qMCIrCC,EAAU,CACZC,G,OAAIC,GAGO,aAAO,IAAD,EACiBC,mBAAS,MAD1B,mBACZC,EADY,KACAC,EADA,KAkCnB,OA5BAC,qBAAU,WACR,IAAMC,EAAO,IAAIC,IAAQR,GACzBO,EAAKE,OAAOC,OAAS,EACrB,IAAMC,EAAS,IAAIC,IAAS,GAAK,KAC3BC,EAAgB,IAAIC,IAAc,CACtCC,UAAW,MACXC,SAAU,GACVC,IAAK,MAEPV,EAAKE,OAAOC,OAAS,GACrBH,EAAKW,QAAQL,GACbA,EAAcK,QAAQP,GACtBA,EAAOO,QAAQC,KACfd,EAAcE,KACb,IAeC,wBAAIa,QAAS,kBAAKhB,EAAWiB,qBAAqB,KAAM,MAAxD,cCxCS,aACX,OACI,oCACA,yCACA,kBAACC,EAAD,QCLO,aACX,OACI,2CCyBOC,MAlBf,WACE,OACE,yBAAKC,UAAU,OACT,kBAAC,IAAD,KACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,KAAK,cACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,KACV,kBAACE,EAAD,WCRQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.687df2dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/A.5e794cdb.mp3\";","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Freeverb, PingPongDelay, Master, Sampler } from \"tone\";\nimport A from \"../assets/A.mp3\"\nconst samples = {\n    C3: A\n}\n\nexport default () => {\n  const [instrument, setInstrument] = useState(null);\n//   const note = useSelector(getNote(type));\n//   const velocity = useSelector(getVelocity(type));\n//   const user = useSelector(getUser(type));\n\n  useEffect(() => {\n    const inst = new Sampler(samples);\n    inst.volume.value = -6;\n    const reverb = new Freeverb(0.6, 5000);\n    const pingPongDelay = new PingPongDelay({\n      delayTime: \"32n\",\n      feedback: 0.7,\n      wet: 0.25,\n    });\n    inst.volume.value = -24;\n    inst.connect(pingPongDelay);\n    pingPongDelay.connect(reverb);\n    reverb.connect(Master);\n    setInstrument(inst);\n  }, []);\n\n//   useEffect(() => {\n//     if (instrument) {\n//       if (note) {\n//         // TODO: check why this is not working\n//         // instrument.triggerAttack(note, 0, velocity);\n//         instrument.triggerAttack(note, undefined, velocity);\n//       } else {\n//         instrument.triggerRelease();\n//       }\n//     }\n//   }, [instrument, note, velocity]);\n\n  return (\n      <h1 onClick={()=> instrument.triggerAttackRelease(\"C3\", 0.2)}>orchestra</h1>\n  );\n};\n","import React from \"react\"\nimport Orchestra from \"./Orchestra\"\n\nexport default () => {\n    return (\n        <>\n        <div>audience</div>\n        <Orchestra></Orchestra>\n        </>\n    )\n}","import React from \"react\"\n\nexport default () => {\n    return (\n        <div>conductor</div>\n    )\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Audience from \"./components/Audience\"\nimport Conductor from \"./components/Conductor\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n          <Router>\n          <Switch>\n          <Route path=\"/conductor\">\n            <Conductor />\n          </Route>\n          <Route path=\"/\">\n            <Audience />\n          </Route>\n\n        </Switch>\n          </Router>\n    </div>\n )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}